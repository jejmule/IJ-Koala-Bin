//20140703 - Jerome Parent
//Reader for Koala binary generated by Lyncee Tec software
//This plugin read .bin file, scale the XY value in microns and the Z value in nm
//Based on reader tutorial provided by Albert Cardona : http://albert.rierol.net/imagej_programming_tutorials.html

import ij.*;
import ij.gui.*;
import ij.plugin.*;
import ij.process.*;
import java.awt.*;
import java.io.*;
import java.io.File;
import java.nio.*;
import ij.io.*;

public class Koala_Bin_Writer implements PlugIn {  
  
    public void run(String arg) {  
        ImagePlus imp = WindowManager.getCurrentImage();
        if (null == imp) return;
		boolean image = imp.getNDimensions() == 2;
		boolean stacks = imp.getNDimensions() == 3;
		boolean Hstacks = imp.getNDimensions() == 4;
		
		String filename = "untitled";
		String dir;
		
		if(image) {
			OpenDialog od = new OpenDialog("Choose a .bin file", null);  
			dir = od.getDirectory();
			filename = od.getFileName();
			if (null == dir) return; // dialog was canceled  
			dir = dir.replace('\\', '/'); // Windows safe  
			if (!dir.endsWith("/")) dir += "/";
			if (!filename.endsWith(".bin")) filename += ".bin";
			ImagePlus temp = new ImagePlus("temp",imp.getProcessor());
			FileInfo fi = imp.getFileInfo();
			fi.pixelDepth = imp.getOriginalFileInfo().pixelDepth;
			temp.setFileInfo(fi);
			saveCustom(temp, dir + filename);
		}
		
		if(stacks) {
			DirectoryChooser directory = new DirectoryChooser("Select Directory");
			dir = directory.getDirectory();
			if (null == dir) return; // user canceled dialog  
			dir = dir.replace('\\', '/'); // Windows safe  
			if (!dir.endsWith("/")) dir += "/";
		
			String label = imp.getStack().getSliceLabel(1);
			if (label != null) {
				if(label.contains("phase")) filename = "phase";
				else if(label.contains("intensity")) filename = "intensity";
			}
			
			for (int i=1; i<=imp.getNSlices(); i++) {
				imp.setPosition(i);
				ImagePlus temp = new ImagePlus("temp",imp.getProcessor());
				//temp.copyScale(imp);
				FileInfo fi = imp.getFileInfo();
				FileInfo fiOriginal = imp.getOriginalFileInfo();
				if (fiOriginal != null) 
					fi.pixelDepth = imp.getOriginalFileInfo().pixelDepth;
				else fi.pixelDepth = 1;
				temp.setFileInfo(fi);
				saveCustom(temp, dir + String.format("%05d", i-1) +"_"+filename+".bin");
			}
			imp.setPosition(1);
		}
		
		if(Hstacks) {
			DirectoryChooser directory = new DirectoryChooser("Select Directory");
			dir = directory.getDirectory();
			if (null == dir) return; // user canceled dialog  
			dir = dir.replace('\\', '/'); // Windows safe  
			if (!dir.endsWith("/")) dir += "/";
			
			//copy txt and xml file
			String sourceDir = imp.getOriginalFileInfo().directory;
			File timestamps = new File(sourceDir,"timestamps.txt");
			File strobo_timestamps = new File(sourceDir,"strobo_timestamps.txt");
			File strobosetup = new File(sourceDir,"strobosetup.xml");
			if(timestamps.exists())  {
				File temp = new File(dir,"timestamps.txt");
				try {
					copyFileUsingStream(timestamps,temp);
				}
				catch(IOException e){
					IJ.showMessage("error copying timestamps.txt" );
				}
			}
			if(strobo_timestamps.exists())  {
				File temp = new File(dir,"strobo_timestamps.txt");
				try {
					copyFileUsingStream(strobo_timestamps,temp);
				}
				catch(IOException e){
					IJ.showMessage("error copying strobo_timestamps.txt" );
				}
			}
			if(strobosetup.exists())  {
				File temp = new File(dir,"strobosetup.xml");
				try {
					copyFileUsingStream(strobosetup,temp);
				}
				catch(IOException e){
					IJ.showMessage("error copying strobosetup.xml" );
				}
			}
			
			for (int c=1; c<=imp.getNChannels(); c++) {
				for (int t=1; t<=imp.getNFrames();t++) {
					String path;
					if (c==1) {
						path = dir + "Phase/Float/Bin/";
						filename = "phase";
					}
					else {
						path = dir + "Intensity/Float/Bin/";
						filename = "intensity";
					}
					File file = new File(path);
					if (!file.exists()) file.mkdirs();

					imp.setPosition(c,1,t);
					ImagePlus temp = new ImagePlus("temp",imp.getProcessor());
					FileInfo fi = imp.getFileInfo();
					fi.pixelDepth = imp.getOriginalFileInfo().pixelDepth;
					temp.setFileInfo(fi);
					saveCustom(temp, path + String.format("%05d", t-1) +"_"+filename+".bin");
				}
			}
		}
    } 
  
    static public void saveCustom(ImagePlus imp, String path) {
        File file = new File(path);  
		FileOutputStream dos = null;	
        try {  
            dos = new FileOutputStream(file);
			// read image Information:  
            //FileInfo fi = imp.getFileInfo();
			FileInfo fi = imp.getOriginalFileInfo();
			//fi.pixelDepth = imp.getCalibration().pixelDepth;
			
			//Header 
			ByteBuffer bbuf = ByteBuffer.allocate(23);
			bbuf.order(ByteOrder.LITTLE_ENDIAN);
			bbuf.put((byte)1);
			bbuf.put((byte)0);
			bbuf.putInt(23);
			bbuf.putInt(fi.width);
			bbuf.putInt(fi.height);
			bbuf.putFloat((float)(fi.pixelHeight/1e6));
			
			//save to meter
			/*//cpnversion factor 1
			bbuf.putFloat((float)(1));
			//data unit is meter
			bbuf.put((byte)2); */
			
			//save to radian
			//conversion factor
			//IJ.showMessage(""+imp.getInfoProperty());
			//IJ.showMessage(""+fi.pixelDepth);
			bbuf.putFloat((float)(fi.pixelDepth));
			//data unit is radian
			//bbuf.put((byte)1);
		
			//dos.write(bbuf.array());
            
			// BODY   
			ImageProcessor temp = imp.getProcessor();
			byte unit = 0;
			
			if(Math.round(fi.pixelDepth) == Math.round(180/Math.PI)) {
				temp.multiply(1/fi.pixelDepth); //conversion in radians
				//data unit is radian
				unit = 1;
			}
			else if(fi.pixelDepth > 0){
				temp.multiply(1e-9); //conversion in meters
				temp.multiply(1/fi.pixelDepth); //conversion in radians
				//data unit is radian
				unit = 1;
			}
			else if(fi.pixelDepth == 1){
				temp.multiply(1e-9); //conversion in meters
				//data unit is meter
				unit = 2;
			}
			else if(fi.pixelDepth == 0) {
				//grayscale 
				//data unit is grayscale
				unit = 0;
			}
			//add unit to buffer
			bbuf.put((byte)unit);
			//write buffer
			dos.write(bbuf.array());
			//temp.multiply(1e-9); //conversion in meters
			//temp.multiply(1/fi.pixelDepth); //conversion in radians
            float[] pix = (float[])temp.getPixels();
			ByteBuffer byteBuf = ByteBuffer.allocate(fi.width*fi.height*4);
			byteBuf.order(ByteOrder.LITTLE_ENDIAN);
			FloatBuffer floatBuf = byteBuf.asFloatBuffer().put(pix);
			byte[] data = byteBuf.array();
			dos.write(data);  
            dos.flush();  
			//workaround to reset input data with the right scale !
			temp.multiply(1e9);
			temp.multiply(fi.pixelDepth);
        } catch (Exception e) {  
            e.printStackTrace();  
        } finally {  
            //dos.close();  
        }  
    }

	static private byte[] Int2LE(int in) { 
		return ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(in).array(); 
    } 	
	static private byte[] Float2LE(float in) {
		return ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putFloat(in).array();
	}
	
	static private void copyFileUsingStream(File source, File dest) throws IOException {
    InputStream is = null;
    OutputStream os = null;
    try {
        is = new FileInputStream(source);
        os = new FileOutputStream(dest);
        byte[] buffer = new byte[1024];
        int length;
        while ((length = is.read(buffer)) > 0) {
            os.write(buffer, 0, length);
        }
    } finally {
        is.close();
        os.close();
    }
	}
}  